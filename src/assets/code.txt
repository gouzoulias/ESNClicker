// util.ts

import * as _ from 'lodash';

type Enum = Record<string, number | string>;

export const initFromEnum = <A extends Enum, B extends object | number | boolean | string>(
  enumType: A,
  defaultValue: B | ((val: A[keyof A]) => B),
): Record<A[keyof A], B> => {
  const enumObject: Record<A[keyof A], B> = {} as Record<A[keyof A], B>;

  _.forEach(enumType, (value: A[keyof A]) => {
    if (typeof defaultValue === 'function') {
      enumObject[value] = defaultValue(value);
    } else {
      enumObject[value] = defaultValue;
    }
  });

  return enumObject;
};


// useTick.ts

import { useEffect, useRef } from 'react';

export const useTick = (callback: () => void, deltaTimeMS: number) => {
  const intervalRef = useRef<number>();
  const callbackRef = useRef(callback);

  useEffect(() => {
    callbackRef.current = callback;
  }, [callback]);

  useEffect(() => {
    intervalRef.current = window.setInterval(() => callbackRef.current(), deltaTimeMS);

    return () => window.clearInterval(intervalRef.current);
  }, [deltaTimeMS]);

  return intervalRef;
};

// Game.tsx

import * as _ from 'lodash';
import React, { useCallback, useState } from 'react';
import { useTick } from '../useTick.ts';
import { Aux, Dev, gameContext, gameContextDefaultValues, PO } from './GameContext.ts';

export const Game = ({ children }: React.PropsWithChildren) => {
  const [codeLines, setCodeLines] = useState(gameContextDefaultValues.codeLines);
  const [money, setMoney] = useState(gameContextDefaultValues.money);

  const [boughtUpgrades, setBoughtUpgrades] = useState(gameContextDefaultValues.boughtUpgrades);
  const [activatedUpgrades, setActivatedUpgrades] = useState(gameContextDefaultValues.activatedUpgrades);

  const [devTeam, setDevTeam] = useState(gameContextDefaultValues.devTeam);
  const [devProductivity, setDevProductivity] = useState(gameContextDefaultValues.devProductivity);

  const [poTeam, setPoTeam] = useState(gameContextDefaultValues.poTeam);
  const [poProductivity, setPoProductivity] = useState(gameContextDefaultValues.poProductivity);

  const [unlockedAux, setUnlockedAux] = useState(gameContextDefaultValues.unlockedAux);
  const [auxTeam, setAuxTeam] = useState(gameContextDefaultValues.auxTeam);

  const gameTick = useCallback(() => {
    setCodeLines(
      (prevState) =>
        prevState +
        _(devTeam)
          .map((numberOfDev, devType: Dev) => numberOfDev * devProductivity[devType])
          .sum(),
    );
  }, [devProductivity, devTeam]);

  useTick(gameTick, 1000);

  const createManualLine = useCallback(() => {
    setCodeLines((prevState) => prevState + 1);
  }, []);

  const buyDev = useCallback((dev: Dev) => {
    setDevTeam((prevState) => ({
      ...prevState,
      [dev]: prevState[dev] + 1,
    }));
  }, []);

  const buyPO = useCallback((po: PO) => {
    setPoTeam((prevState) => ({
      ...prevState,
      [po]: prevState[po] + 1,
    }));
  }, []);

  const buyAux = useCallback((aux: Aux) => {
    setAuxTeam((prevState) => ({
      ...prevState,
      [aux]: prevState[aux] + 1,
    }));
  }, []);

  return (
    <gameContext.Provider
      value={{
        codeLines,
        money,

        boughtUpgrades,
        activatedUpgrades,

        devTeam,
        devProductivity,

        poTeam,
        poProductivity,

        unlockedAux,
        auxTeam,

        createManualLine,
        buyDev,
        buyPO,
        buyAux,
      }}
    >
      {children}
    </gameContext.Provider>
  );
};
